Design goals. Our original goal for this book was to cover the 50 algorithms that every programmer should know. We use the word programmer to refer to anyone engaged in trying to accomplish something with the help of a computer, including scientists, engineers, and applications developers, not to mention college students in science, engineering, and computer science. The code is optimized for clarity, portability, and efficiency. While some of our implementations are as fast as their counterparts in java.util, our primary goal is to express the core algorithmic idea in an elegant and efficient manner. While we embrace some advanced Java features (such as generics and iterators), we avoid others that would interfere with the exposition (such as inheritance and concurrency).

Algorithms and clients in the textbook. The list below includes nearly 200 Java programs (some are clients, some others are basic infrastructure). Click on the program name to access the Java code; click on the description to access the javadoc; click on the data file names to access the data. You can download all of the programs as algs4.jar and the data as algs4-data.zip.

1	FUNDAMENTALS
–	BinarySearch.java	binary search
–	RandomSeq.java	random numbers in a given range
–	Average.java	average of a sequence of numbers
–	Cat.java	concatenate files
–	Knuth.java	Knuth shuffle
–	Counter.java	counter
–	StaticSETofInts.java	set of integers
–	Whitelist.java	whitelist client
–	Vector.java	Euclidean vector
–	Date.java	date
–	Transaction.java	transaction
–	Point2D.java	point
–	RectHV.java	axis-aligned rectangle
–	Interval1D.java	1d interval
–	Interval2D.java	2d interval
–	Accumulator.java	running average and stddev
1.1	ResizingArrayStack.java	LIFO stack (resizing array)
1.2	LinkedStack.java	LIFO stack (linked list)
–	Stack.java	LIFO stack
–	ResizingArrayQueue.java	FIFO queue (resizing array)
1.3	LinkedQueue.java	FIFO queue (linked list)
–	Queue.java	FIFO queue
–	ResizingArrayBag.java	multiset (resizing array)
1.4	LinkedBag.java	multiset (linked list)
–	Bag.java	multiset
–	Stopwatch.java	timer (wall time)
–	StopwatchCPU.java	timer (CPU time)
–	LinearRegression.java	simple linear regression
–	ThreeSum.java	brute-force three sum
–	ThreeSumFast.java	faster three sum
–	DoublingTest.java	doubling test
–	DoublingRatio.java	doubling ratio
–	QuickFindUF.java	quick find
–	QuickUnionUF.java	quick union
1.5	WeightedQuickUnionUF.java	weighted quick union
–	UF.java	union-by-rank with path halving
2	SORTING
2.1	Insertion.java	insertion sort
–	InsertionX.java	insertion sort (optimized)
–	BinaryInsertion.java	binary insertion sort
2.2	Selection.java	selection sort
2.3	Shell.java	shellsort
2.4	Merge.java	top-down mergesort
–	MergeBU.java	bottom-up mergesort
–	MergeX.java	optimized mergesort
–	Inversions.java	number of inversions
2.5	Quick.java	quicksort
–	Quick3way.java	quicksort with 3-way partitioning
–	QuickX.java	optimized 2-way quicksort
–	QuickBentleyMcIlroy.java	optimized 3-way quicksort
–	TopM.java	priority queue client
2.6	MaxPQ.java	max heap priority queue
–	MinPQ.java	min heap priority queue
–	IndexMinPQ.java	index min heap priority queue
–	IndexMaxPQ.java	index max heap priority queue
–	Multiway.java	multiway merge
2.7	Heap.java	heapsort
3	SEARCHING
–	FrequencyCounter.java	frequency counter
3.1	SequentialSearchST.java	sequential search
3.2	BinarySearchST.java	binary search
3.3	BST.java	binary search tree
3.4	RedBlackBST.java	red-black tree
3.5	SeparateChainingHashST.java	separate chaining hash table
3.6	LinearProbingHashST.java	linear probing hash table
–	ST.java	ordered symbol table
–	SET.java	ordered set
–	DeDup.java	remove duplicates
–	WhiteFilter.java	whitelist filter
–	BlackFilter.java	blacklist filter
–	LookupCSV.java	dictionary lookup
–	LookupIndex.java	index and inverted index
–	FileIndex.java	file indexing
–	SparseVector.java	sparse vector
4	GRAPHS
–	Graph.java	undirected graph
–	GraphGenerator.java	generate random graphs
–	DepthFirstSearch.java	depth-first search in a graph
–	NonrecursiveDFS.java	DFS in a graph (nonrecursive)
4.1	DepthFirstPaths.java	paths in a graph (DFS)
4.2	BreadthFirstPaths.java	paths in a graph (BFS)
4.3	CC.java	connected components of a graph
–	Bipartite.java	bipartite or odd cycle (DFS)
–	BipartiteX.java	bipartite or odd cycle (BFS)
–	Cycle.java	cycle in a graph
–	EulerianCycle.java	Eulerian cycle in a graph
–	EulerianPath.java	Eulerian path in a graph
–	SymbolGraph.java	symbol graph
–	DegreesOfSeparation.java	degrees of separation
–	Digraph.java	directed graph
–	DigraphGenerator.java	generate random digraphs
4.4	DirectedDFS.java	depth-first search in a digraph
–	NonrecursiveDirectedDFS.java	DFS in a digraph (nonrecursive)
–	DepthFirstDirectedPaths.java	paths in a digraph (DFS)
–	BreadthFirstDirectedPaths.java	paths in a digraph (BFS)
–	DirectedCycle.java	cycle in a digraph
–	DirectedCycleX.java	cycle in a digraph (nonrecursive)
–	DirectedEulerianCycle.java	Eulerian cycle in a digraph
–	DirectedEulerianPath.java	Eulerian path in a digraph
–	DepthFirstOrder.java	depth-first order in a digraph
4.5	Topological.java	topological order in a DAG
–	TopologicalX.java	topological order (nonrecursive)
–	TransitiveClosure.java	transitive closure
–	SymbolDigraph.java	symbol digraph
4.6	KosarajuSharirSCC.java	strong components (Kosaraju–Sharir)
–	TarjanSCC.java	strong components (Tarjan)
–	GabowSCC.java	strong components (Gabow)
–	EdgeWeightedGraph.java	edge-weighted graph
–	Edge.java	weighted edge
–	LazyPrimMST.java	MST (lazy Prim)
4.7	PrimMST.java	MST (Prim)
4.8	KruskalMST.java	MST (Kruskal)
–	BoruvkaMST.java	MST (Boruvka)
–	EdgeWeightedDigraph.java	edge-weighted digraph
–	DirectedEdge.java	weighted, directed edge
4.9	DijkstraSP.java	shortest paths (Dijkstra)
–	DijkstraUndirectedSP.java	undirected shortest paths (Dijkstra)
–	DijkstraAllPairsSP.java	all-pairs shortest paths
4.10	AcyclicSP.java	shortest paths in a DAG
–	AcyclicLP.java	longest paths in a DAG
–	CPM.java	critical path method
4.11	BellmanFordSP.java	shortest paths (Bellman–Ford)
–	EdgeWeightedDirectedCycle.java	cycle in an edge-weighted digraph
–	Arbitrage.java	arbitrage detection
–	FloydWarshall.java	all-pairs shortest paths (dense)
–	AdjMatrixEdgeWeightedDigraph.java	edge-weighted graph (dense)
5	STRINGS
–	Alphabet.java	alphabet
–	Count.java	alphabet client
5.1	LSD.java	LSD radix sort
5.2	MSD.java	MSD radix sort
–	InplaceMSD.java	In-place MSD radix sort1
5.3	Quick3string.java	3-way string quicksort
–	AmericanFlag.java	American flag sort1
–	AmericanFlagX.java	non-recursive American flag sort1
5.4	TrieST.java	multiway trie symbol table
–	TrieSET.java	multiway trie set
5.5	TST.java	ternary search trie
5.6	KMP.java	substring search (Knuth–Morris–Pratt)
5.7	BoyerMoore.java	substring search (Boyer–Moore)
5.8	RabinKarp.java	substring search (Rabin–Karp)
5.9	NFA.java	NFA for regular expressions
–	GREP.java	grep
–	BinaryDump.java	binary dump
–	HexDump.java	hex dump
–	PictureDump.java	picture dump
–	Genome.java	genomic code
–	RunLength.java	data compression (run-length coding)
5.10	Huffman.java	data compression (Huffman)
5.11	LZW.java	data compression (Lempel–Ziv–Welch)
6	CONTEXT
6.1	CollisionSystem.java	collision system
–	Particle.java	particle
6.2	BTree.java	B-tree
6.3	SuffixArray.java	suffix array (suffix sorting)
–	SuffixArrayX.java	suffix array (optimized)
–	LongestRepeatedSubstring.java	longest repeated substring
–	KWIK.java	keyword in context
–	LongestCommonSubstring.java	longest common substring
6.4	FordFulkerson.java	maxflow–mincut
–	FlowNetwork.java	capacitated network
–	FlowEdge.java	capacitated edge with flow
–	GlobalMincut.java	global mincut (Stoer–Wagner)5
–	BipartiteMatching.java	bipartite matching (alternating path)
–	HopcroftKarp.java	bipartite matching (Hopcroft–Karp)
–	AssignmentProblem.java	weighted bipartite matching
–	LinearProgramming.java	linear programming (simplex)
–	TwoPersonZeroSumGame.java	two-person zero-sum game
9	BEYOND
–	GaussianElimination.java	Gaussian elimination
–	GaussJordanElimination.java	Gauss–Jordan elimination
–	FFT.java	Fast Fourier transform
–	Complex.java	complex number
–	Polynomial.java	polynomial (integer)
–	GrahamScan.java	2d convex hull (Graham scan)
–	FarthestPair.java	2d farthest pair (rotating calipers)
–	ClosestPair.java	2d closest pair
–	FenwickTree.java	Fenwich tree2
–	SegmentTree.java	Segment tree2
–	PatriciaST.java	PATRICIA trie symbol table3
–	PatriciaSET.java	PATRICIA trie set3
–	MultiwayMinPQ.java	Multiway heap4
–	IndexMultiwayMinPQ.java	Index multiway heap4
–	BinomialMinPQ.java	Binomial heap4
–	IndexBinomialMinPQ.java	Index binomial heap4
–	FibonacciMinPQ.java	Fibonacci heap4
–	IndexFibonacciMinPQ.java	Index Fibonacci heap4
–	AVLTreeST.java	AVL tree5
1 contributed by Ivan Pesin
2 contributed by Ricardo Pacheco
3 contributed by John Hentosh
4 contributed by Tristan Claverie
5 contributed by Marcelo Silva


Standard input and output libraries. We use these standard input and output libraries from Introduction to Programming: An Interdisciplinary Approach. They are part of algs4.jar.

§	PROGRAM	DESCRIPTION / JAVADOC
1.5 	StdIn.java	read numbers and text from standard input
1.5 	StdOut.java	write numbers and text to standard output
1.5 	StdDraw.java	draw geometric shapes in a window
1.5 	StdAudio.java	create, play, and manipulate sound
2.2 	StdRandom.java	generate random numbers
2.2 	StdStats.java	compute statistics
2.2 	StdArrayIO.java	read and write 1D and 2D arrays
3.1 	In.java	read numbers and text from files and URLs
3.1 	Out.java	write numbers and text to files
3.1 	Draw.java	draw geometric shapes
3.1 	DrawListener.java	interactions with Draw
3.1 	Picture.java	process color images
3.1 	GrayscalePicture.java	process grayscale images
–	BinaryStdIn.java	read bits from standard input
–	BinaryStdOut.java	write bits to standard output
–	BinaryIn.java	read bits from files and URLs
–	BinaryOut.java	write bits to files
